//AUTHOR:		DANIEL CRISP
//DESC:			parseSet NOTES

/*
Whats left to do....
Create aliasmap array.
Put values to 

CS-Studio training...
http://ics-web.sns.ornl.gov/kasemir/CSS/Training/
*/


	// Request Filenames From User
	//char *inpfile = request_filename("Enter input filename:\n"); //Worked, but wanted to use non-pointed char array
	//inpfile = request_filename("Enter input filename:\n"); //Cannot assign to char[40]
	strcpy(inpfile,request_filename("Enter saveset filename:\n"));

//inpfile = request_filename("Enter Array to sort:\n"); assignment to char [40] allowed with strcpy...




HAVE SAVESET DATA
HAVE ALIASMAP DATA

WANT TO CREATE OBJECTS WITH SET/RD NAMES, & VALUES.
	THEN REPLACE OLD NAMES IF SEEN
	AND PARSE NAME INTO MACROS
	AND OUTPUT TRANSLATED NAMES

parseSet.cpp(`140): error C2664: 'unsigned int std::basic_string<char,std::char_traits<char>,std::allocator<char>>::copy(_Elem *, unsigned int, unsigned int) const': cannot convert argument 1 from 'std::string' to 'char *'
	with
	[
		_Elem=char
	]

apparently...
I DO NOT RETURN a name_set value matching "REA_BTS23:PSD_D1155:I_CSET" when I inlcude the first part...

1)
char *setStr = new char[name_set[0].length() + 1];
strcpy(setStr, name_set[0].c_str());
cout << "\nj: " << 0 << "\tGets us " << setStr << "...";
delete [] setStr;/**/

2)
string Str = ("REA_BTS23:PSD_D1155:I_CSET");
	for (int j = 0; j < num[0]; ++j) {
		if (Str.compare(name_set[j])==0) {
			cout << "\nFound set at j equals " << j << endl;
		} else if (Str.compare(name_read[j])==0) {
			cout << "\nFound read at j equals " << j << endl;
		} else if (j==num[0]-1) {
			cout << "\nNOT FOUND\n";
		}
	}


TRIED TO ADD VECTOR STRUCT:
#include<vector>
class S
{
	string oldStr;
	string newStr;
	public:
		S(string ostr, string nstr) {
			set(ostr, nstr);
		}
		S() {}
		void set(string ostr, string nstr) {
			oldStr = ostr;
			newStr = nstr;
		}
		
};

vector<S> mapVec;
	
while (!finMap.eof()) {
	get_data(finMap, name_old, name_new, i);
	aliasmap[name_old[i]] = name_old[i];
	S s(name_old[i], name_new[i]);
	mapVec.push_back(s);
	i++;
}
//Last position is 0:0, so Its easier to tell later on if std::find failed
S s("0","0");
mapVec.push_back(s);

and later on, in a loop where I was getting saveset data... I was going to try this:
//find(mapVec.old.begin(),mapVec.old.end(), name_set[i]);


TRIED TO MAKE AN EXTRA CLASS TO HELP... IT DIDN'T
class infomap
{
	private:
		char *oldStr, *newStr;
		char *SYS, *SUB, *DEV, *INST, *SIG, *DOM, *SUFX;
	public:
		infomap(string ostr, string nstr) {
			set(ostr, nstr);
		}
		infomap() {}
		void set(string ostr, string nstr) {
			oldStr = strtochar(ostr);
			newStr = strtochar(nstr);
		}
		char *strtochar(string str) {
			char *ans = new char[str.length() + 1];
			strcpy(ans, str.c_str());
			return ans;
		}
		void parseMacros();
};



/*Can't switch 'char *'
switch(inpfile) {
		case "value_set":
			bubblesort(value_set, index, MAX_LINES_PER_FILE);
		case "value_read":
			bubblesort(value_read, index, MAX_LINES_PER_FILE);
}*/
	
	
/* USE BUBBlE SORT AFTER PARSING D#### FROM TRANSLATED CHAR ARRAY
cout << "\n\nSORTING INPUT:\n\n";
bubblesort(value_set[], index[], MAX_LINES_PER_FILE);
*/

http://forum.codecall.net/topic/65824-how-to-convert-from-char-to-string/
GETTING AWAY FROM USING 'char *':
	You can simply use the (overloaded) assignment operator to assign a char * to a std::string. This will copy all the data over automatically.

	If you're trying to copy from a std::string to a char *, the best way to do that is with strncpy(), but you have to get the char data from the string first!

		size_t str_size_w_null_end = str->size() + 1;
	
		char *buffer = malloc(str_size_w_null_end);
	  
		strncpy(buffer, str->c_str(), str_size_w_null_end
  
OR... ELSE... TRY THIS

	char *but = "test";
	string s;
	s = buf;

	#include <cstring> //For C++
	#include <string.h> //For C
	
	/* The second and third lines here, look a lot like.. 'std::string s(buf);'
	
NOTE NOT TO FORGET SIZE...
	don't forget the size, if you don't specify the buf size in the constructor, you could read garbage:

	std::string s(buf, buf_size);

	I'd use this, i had problems reading input files in a game and that was the cause
	
IN RESPONSE TO PRINTING FILE PATHS..
string temp_file;
temp_file = my_dir;
temp_file += string ("\\file.tmp");

DrDogg offered this snippet which prints "FishSpasm"
	#include <iostream>
	#include <string>

	using namespace std;

	const char* a = "Fish";

	int main()
	{
	   string b;
	   b = a;
	   b += string("Spam");
	   cout << b;
	}
	
A STANDARD CHAR POINTER. Gary Willoughby is trying to cast one to a string... 'in D' (I donno what 'D' is though)
	// string to char*
	char *x = cast(char*)("Hello World\0");

	// char* to string?
	string x = cast(string)x;
	string x = cast(immutable(char)[])x;
	
	ONE ANSWER:
	Use 'std.conv.to' to convert from 'char*' to 'string'. Use 'std.string.toStringZ' to go the other way.
		import std.string;
		import std.stdio;
		import std.conv;

		void main()
		{
			immutable(char)* x = "Hello World".toStringz();
			auto s = to!string(x);
			writeln(s);
		}
	
	ANOTHER ANSWER:
	If you know the exact length.. try this..
	...Taco says that he things 'len' should be of type 'size_t'
		immutable(char)* cptr = obj.SomeSource();
		int len = obj.SomeLength();

		string str = cptr[0..len];
	
LOOKING FOR A FUNCTION TO ASSIGN CHAR ARRAY TO A STRING:
...continue looking at answers..
it looks like there was some trouble in implimentation...
http://www.programmersheaven.com/discussion/309708/converting-char-array-to-string-type
	std::string str;
	char array[] = "Hello World";
	for(int i = 0; array[i] != 0; i++)
	str += array[i];
	
	OR...
		std::string str;
		char array[] = "Hello World";

		str = array;
		
		
